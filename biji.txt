consul:微服务注册中心
启动命令:
consul agent -dev
cmd 命令窗口执行:consul.exe agent -server ui -bootstrap -client 0.0.0.0 -data-dir="E:\consul" -bind X.X.X.X
其中X.X.X.X为服务器ip,即可使用http://X.X.X.X:8500 访问ui而不是只能使用localhost连接
数据库的配置：
datasource:
      url: jdbc:mysql://10.0.50.98:3306/jzmao?useUnicode=true&amp;characterEncoding=utf-8&relaxAutoCommit=true&zeroDateTimeBehavior=convertToNull
      username: jianzhimao
      password: jiuwei20130629
      driver-class-name: com.mysql.jdbc.Driver
      type: com.zaxxer.hikari.HikariDataSource  #缓存池
      hikari:
        minimum-idle: 5
        maximum-pool-size: 100
        connection-timeout: 10000
        connection-test-query: SELECT 1
  redis:
    host: 10.0.50.81
    port: 6379
    database: 0
    password:
    pool:
      max-idle: 200
      min-idle: 100
      max-active: 200
      max-wait: -1
      timeout: 6000
mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.jiuwei.job.domain
  configuration.map-underscore-to-camel-case: true  #开启驼峰命名，将数据库表字段映射成驼峰命名

spring:
  jackson:
    default-property-inclusion: non_empty
#配置返回json数据时，为空的不返回。

RESTful API的支持
一.uri命名规范
1.提交数据使用 POST 请求，修改数据使用 PUT 请求，删除数据使用 DELETE 请求，查询数据使用 GET 请求。
2.POST，PUT 请求数据，除单个ID外，统一放在body体内提交。
3.登录密码，用户，token等，放在请求头中。
4.例子  

查询列表              -XGET        /api/job?q=广州&page=1&pageSize=10
按照ID查询           -XGET        /api/job/10000
按照ID批量查询    -XGET        /api/jobs?id=10000,10001,10002
添加数据              -XPOST       /api/job        body
修改数据              -XPUT          /api/job        body
按照ID删除          -XDELETE   /api/job/10000
按照ID批量删除   -XDELETE   /api/job?id=10000,10001,10002    



二.命名规范  

1.Java bean 中，字段名称不能以 is 开头，错误示例，isdelete，isDelete  
2.Java bean 中，字段不能使用短命名，错误示例 c（customer），srv （server）

 
add添加时以
git回退到某个commit的某个文件
2018-12-28 15:46:00 weixin_30364325 阅读数 17
原文链接：http://www.cnblogs.com/jwqtest/p/10190989.html
操作步骤如下:
　1. git log "filename" (如:git log code/base/unidentified.c)
  2. git reset "commit-id" "filename" (如: git reset 12edd3a code/base/unidentified.c)


git add .
git commit -a -m "增加收藏功能"
git pull
git push


回滚
根据日志查出的版本号进行回滚
// 放弃当前修改
svn revert -R .
// 更新
svn up
// 查看最近5条svn log日志
svn log -l 5
// 从r608回滚到r602
svn merge -r 608:602 ""



启动类上扫面了两个包，一个是该项目的扫描，一个是引入jar的包扫描，你也可以简单来写（@SpringBootApplication(scanBasePackages = {"com"})）
还有就是@FeignClient注解的扫描，扫描的是对外接口所在的包。
getway配置router转发，转发到相应的服务，访问路径配置path，转发服务配置url
lb表示从注册中心获取服务

jw-commond-utils工具类工程，jar包
mobile-app-gateway-web 网关服务工程
jiuwei-servee-client各个微服务之间相互调用的jar包
job-api 一个微服务工程

由mobile-app-gateway-web工程进行做app网关转发，其中网关转发又做了登陆拦截，只有登录验证通过后才可以执行后续的操作，网关根据路由配置进行判断后从服务注册中心获取相应的信息，再转发到相应的服务，其中会将相应的参数一并转发。
微服务之间的调用通过jiuwei-servee-client的jar包其中配置好的fegin，通过注入的类对象来调用相应的微服务方法，获取需要返回的值，根据需求再将各个微服务之间的数据进行整合。


kafka简介

Apache Kafka是一个快速、可扩展的、高吞吐、可容错的分布式发布订阅消息系统


Kafka的优势在于：


可靠性：Kafka是一个具有分区机制、副本机制和容错机制的分布式消息系统

可扩展性：Kafka消息系统支持集群规模的热扩展

高性能：Kafka在数据发布和订阅过程中都能保证数据的高吞吐量。即便在TB级数据存储的情况下，仍然能保证稳定的性能。
kafka组件

1.生产者：Producer 是消息生成的源头，负责生产消息并发送到kafka服务器上


2.消费者：Consumer ，负责消费kafka服务器上的消息


3.主题：Topic ，由用户定义配置，用于建立生产者和消费者之间的订阅关系

生产者发送指定的消息到指定的Topic,消费者从这个Topic消费信息


4.消息分区：Partition,一个Topic 下面有多个分区，也是用户指定的

分区存在主从结构，zookeeper作用在该上有leader和follower

leader负责读写，follower负责同步数据


5.Broker ：kafka的服务器ID，一台机器叫一个Broker


6.消费者组：Group ，用于归属同一消费者，在kafka中多个消费者可以共同消费同一个topic下的消息，每个消费者消费其中一部分消息，这些消费者据组成一个分组，拥有同一个分组名称

消费者可以消费一个或者多个分区的数据，相反，一个分区数据同一个分区只能被一个消费者消费


7.Offset

偏移量拉去数据的时候需要知道消息在文件中的偏移量，然后通过偏移量拉去

Kafka实现生产者和消费者之间的通信交流
eg：	topic_name	producer	consumer		summary
	job_view_number	job-api		timer-batch-task	更新兼职浏览数

Gateway 过滤器

Spring Cloud Gateway的filter生命周期不像Zuul那么丰富，它只有两个：“pre”和“post”：

pre:这种过滤器在请求被路由之前调用。可以利用这个过滤器实现身份验证、在集群中选择请求的微服务、记录调试的信息。
post：这种过滤器在路由到服务器之后执行。这种过滤器可用来为响应添加HTTP Header、统计信息和指标、响应从微服务发送给客户端等。
Spring Cloud gateway的filter分为两种：GatewayFilter和Globalfilter。GlobalFilter会应用到所有的路由上，而Gatewayfilter将应用到单个路由或者一个分组的路由上。

利用Gatewayfilter可以修改请求的http的请求或者是响应，或者根据请求或者响应做一些特殊的限制。更多时候可以利用Gatewayfilter做一些具体的路由配置。


svn：
trunk(主干|主线) branchs(分支) tags(标记)



truck(主干|主线|主分支)：是用来做主方向开发的，新功能的开发应放在主线中，当模块开发完成后，需要修改，就用branch。


branch(分支)：分支开发和主线开发是可以同时进行的，也就是并行开发，分支通常用于修复bug时使用


tag(标记)：用于标记某个可用的版本，可以标记已经上线发布的版本，也可以标记正在测试的版本，通常是只读的
tag
此外，你可以标记某些revisions，并且以后重新构建。

通常，tag用于创建项目的一个特定阶段的快照（如上线版本的tag），tag一般不会用来开发或者在tag的revision上做修改。

如果你想要在某个tag版本上做修改，应该从该tag拉取新的branch，在新branch上完成工作，并在工作完成后，在该branch上打上新的tag。

作者：天涯明月_
链接：https://www.jianshu.com/p/72adbf09f177
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


@Deprecated 注解，在之前的开发过程中没遇到过这个注解，于是查了下他的功能：
    简单来讲就是，若某类或某方法加上该注解之后，表示此方法或类不再建议使用，调用时也会出现删除线，但并不代表不能用，只是说，不推荐使用，因为还有更好的方法可以调用。
    或许有人会问 为什么会出现加这个注解呢，直接在写方法的时候定义一个新的不就好了吗？因为在一个项目中，工程比较大，代码比较多，而在后续开发过程中，可能之前的某个方法实现的并不是很合理，这个时候就要新加一个方法，而之前的方法又不能随便删除，因为可能在别的地方有调用它，所以加上这个注解，就方便以后开发人员的方法调用了。




docker：
dockerfile文件编写：
Dockerfile的基本结构
Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。
FROM，项目依赖，需要一个 java 8 版本的 jdk
ADD，第一个参数为 JAR 包的名称， 第二个人参数自定义名称，打包后的名称
EXPOSE，项目运行时的端口
ENTRYPOINT， 运行 JAR 包的指令， 如 java -jar app.jar 为 ["java","-jar","/app.jar"] 
注意这里的 app.jar 和 ADD 的第二个参数参数对应
Docker的三大核心概念：镜像、容器、仓库

镜像：类似虚拟机的镜像、用俗话说就是安装文件。
容器：类似一个轻量级的沙箱，容器是从镜像创建应用运行实例，可以将其启动、开始、停止、删除、而这些容器都是相互隔离、互不可见的。
仓库：类似代码仓库，是Docker集中存放镜像文件的场所。、


redisTemplate
ValueOperations：简单K-V操作
SetOperations：set类型数据操作
ZSetOperations：zset类型数据操作
HashOperations：针对map类型的数据操作
ListOperations：针对list类型的数据操作

//zset内部是按分数来排序的
ZSetOperations<T, T> zSetOperations = redisTemplate.opsForZSet();
zSetOperations.add(key, value, socre);

//String
ValueOperations<T, T> operation = redisTemplate.opsForValue();
operation.set(key,value);

//

git config --global user.name "wxb"
git config --global user.email "wxb@jianzhimao.com"
ssh-keygen -t rsa -C "wxb@jianzhimao.com"

git reset --hard 撤销到某次提交 
git revert 撤销某次提交

JSON 语法规则
JSON 语法是 JavaScript 对象表示语法的子集。

数据在名称/值对中
数据由逗号分隔
大括号保存对象
中括号保存数组
JSON 名称/值对
JSON 数据的书写格式是：名称/值对。
名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：
"name" : "菜鸟教程"



























